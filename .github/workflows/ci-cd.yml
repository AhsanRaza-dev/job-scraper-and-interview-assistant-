name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run linting
        run: |
          flake8 src/ tests/ --max-line-length=100
          black --check src/ tests/

      - name: Run type checking
        run: mypy src/

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml

      - name: Validate JSON schemas
        run: |
          python -c "
          import json
          from src.models.job import Job
          from src.models.interview import InterviewAssessment

          # Test job schema
          job_example = {
              'title': 'Python Developer',
              'company': 'Acme Corp',
              'requirements': ['Python', 'Django', 'CI/CD'],
              'location': 'Remote'
          }
          Job(**job_example)

          # Test interview schema
          interview_example = {
              'fit_score': 78,
              'questions': [
                  'What are Python decorators?',
                  'Explain Django ORM.',
                  'How would you design a CI/CD pipeline?',
                  'Scenario: Your API is slow in production. How do you debug?'
              ]
          }
          InterviewAssessment(**interview_example)

          print('JSON schema validation passed!')
          "

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8000:8000 --name test-app ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          docker stop test-app

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
